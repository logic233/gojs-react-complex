{"ast":null,"code":"import _classCallCheck from \"E:/project/webModelica/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/project/webModelica/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:/project/webModelica/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:/project/webModelica/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/project/webModelica/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\project\\\\webModelica\\\\gojs-react-complex\\\\src\\\\App.tsx\";\n\n/*\r\n*  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\nimport * as go from 'gojs';\nimport { produce } from 'immer';\nimport * as React from 'react';\nimport { DiagramWrapper } from './components/DiagramWrapper';\nimport { SelectionInspector, DataInspector } from './components/SelectionInspector';\nimport './App.css';\n/**\r\n * Use a linkDataArray since we'll be using a GraphLinksModel,\r\n * and modelData for demonstration purposes. Note, though, that\r\n * both are optional props in ReactDiagram.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar demo = [{\n  \"type\": \"Real\",\n  \"name\": \"k\",\n  \"anno\": \"Desired amplification\"\n}, {\n  \"type\": \"Modelica.Units.SI.Resistance\",\n  \"name\": \"R1\",\n  \"anno\": \"Resistance at negative input of OpAmp\"\n}, {\n  \"type\": \"Modelica.Units.SI.Resistance\",\n  \"name\": \"R2\",\n  \"anno\": \"Calculated resistance to reach k\"\n}, {\n  \"type\": \"Modelica.Units.SI.Time\",\n  \"name\": \"T\",\n  \"anno\": \"Time constant\"\n}, {\n  \"type\": \"Modelica.Units.SI.Capacitance\",\n  \"name\": \"C\",\n  \"anno\": \"Calculated capacitance to reach T\"\n}];\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  // Maps to store key -> arr index for quick lookups\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.mapNodeKeyIdx = void 0;\n    _this.mapLinkKeyIdx = void 0;\n    _this.state = {\n      nodeDataArray: [{\n        key: 0,\n        text: 'Alpha',\n        color: 'lightblue',\n        loc: '0 0',\n        para: demo\n      }, {\n        key: 1,\n        text: 'Beta',\n        color: 'orange',\n        loc: '150 0'\n      }, {\n        key: 2,\n        text: 'Gamma',\n        color: 'lightgreen',\n        loc: '0 150'\n      }, {\n        key: 3,\n        text: 'Delta',\n        color: 'pink',\n        loc: '150 150'\n      }],\n      linkDataArray: [{\n        key: -1,\n        from: 0,\n        to: 1\n      }, {\n        key: -2,\n        from: 0,\n        to: 2\n      }, {\n        key: -3,\n        from: 1,\n        to: 1\n      }, {\n        key: -4,\n        from: 2,\n        to: 3\n      }, {\n        key: -5,\n        from: 3,\n        to: 0\n      }],\n      modelData: {\n        canRelink: true\n      },\n      selectedData: null,\n      skipsDiagramUpdate: false\n    }; // init maps\n\n    _this.mapNodeKeyIdx = new Map();\n    _this.mapLinkKeyIdx = new Map();\n\n    _this.refreshNodeIndex(_this.state.nodeDataArray);\n\n    _this.refreshLinkIndex(_this.state.linkDataArray); // bind handler methods\n\n\n    _this.handleDiagramEvent = _this.handleDiagramEvent.bind(_assertThisInitialized(_this));\n    _this.handleModelChange = _this.handleModelChange.bind(_assertThisInitialized(_this));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    _this.handleRelinkChange = _this.handleRelinkChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\r\n   * Update map of node keys to their index in the array.\r\n   */\n\n\n  _createClass(App, [{\n    key: \"refreshNodeIndex\",\n    value: function refreshNodeIndex(nodeArr) {\n      var _this2 = this;\n\n      this.mapNodeKeyIdx.clear();\n      nodeArr.forEach(function (n, idx) {\n        _this2.mapNodeKeyIdx.set(n.key, idx);\n      });\n    }\n    /**\r\n     * Update map of link keys to their index in the array.\r\n     */\n\n  }, {\n    key: \"refreshLinkIndex\",\n    value: function refreshLinkIndex(linkArr) {\n      var _this3 = this;\n\n      this.mapLinkKeyIdx.clear();\n      linkArr.forEach(function (l, idx) {\n        _this3.mapLinkKeyIdx.set(l.key, idx);\n      });\n    }\n    /**\r\n     * Handle any relevant DiagramEvents, in this case just selection changes.\r\n     * On ChangedSelection, find the corresponding data and set the selectedData state.\r\n     * @param e a GoJS DiagramEvent\r\n     */\n\n  }, {\n    key: \"handleDiagramEvent\",\n    value: function handleDiagramEvent(e) {\n      var _this4 = this;\n\n      var name = e.name;\n\n      switch (name) {\n        case 'ChangedSelection':\n          {\n            var sel = e.subject.first();\n            this.setState(produce(function (draft) {\n              if (sel) {\n                if (sel instanceof go.Node) {\n                  var idx = _this4.mapNodeKeyIdx.get(sel.key);\n\n                  if (idx !== undefined && idx >= 0) {\n                    var nd = draft.nodeDataArray[idx];\n                    draft.selectedData = nd;\n                  }\n                } else if (sel instanceof go.Link) {\n                  var _idx = _this4.mapLinkKeyIdx.get(sel.key);\n\n                  if (_idx !== undefined && _idx >= 0) {\n                    var ld = draft.linkDataArray[_idx];\n                    draft.selectedData = ld;\n                  }\n                }\n              } else {\n                draft.selectedData = null;\n              }\n            }));\n            break;\n          }\n\n        default:\n          break;\n      }\n    }\n    /**\r\n     * Handle GoJS model changes, which output an object of data changes via Model.toIncrementalData.\r\n     * This method iterates over those changes and updates state to keep in sync with the GoJS model.\r\n     * @param obj a JSON-formatted string\r\n     */\n\n  }, {\n    key: \"handleModelChange\",\n    value: function handleModelChange(obj) {\n      var _this5 = this;\n\n      var insertedNodeKeys = obj.insertedNodeKeys;\n      var modifiedNodeData = obj.modifiedNodeData;\n      var removedNodeKeys = obj.removedNodeKeys;\n      var insertedLinkKeys = obj.insertedLinkKeys;\n      var modifiedLinkData = obj.modifiedLinkData;\n      var removedLinkKeys = obj.removedLinkKeys;\n      var modifiedModelData = obj.modelData; // maintain maps of modified data so insertions don't need slow lookups\n\n      var modifiedNodeMap = new Map();\n      var modifiedLinkMap = new Map();\n      this.setState(produce(function (draft) {\n        var narr = draft.nodeDataArray;\n\n        if (modifiedNodeData) {\n          modifiedNodeData.forEach(function (nd) {\n            modifiedNodeMap.set(nd.key, nd);\n\n            var idx = _this5.mapNodeKeyIdx.get(nd.key);\n\n            if (idx !== undefined && idx >= 0) {\n              narr[idx] = nd;\n\n              if (draft.selectedData && draft.selectedData.key === nd.key) {\n                draft.selectedData = nd;\n              }\n            }\n          });\n        }\n\n        if (insertedNodeKeys) {\n          insertedNodeKeys.forEach(function (key) {\n            var nd = modifiedNodeMap.get(key);\n\n            var idx = _this5.mapNodeKeyIdx.get(key);\n\n            if (nd && idx === undefined) {\n              // nodes won't be added if they already exist\n              _this5.mapNodeKeyIdx.set(nd.key, narr.length);\n\n              narr.push(nd);\n            }\n          });\n        }\n\n        if (removedNodeKeys) {\n          narr = narr.filter(function (nd) {\n            if (removedNodeKeys.includes(nd.key)) {\n              return false;\n            }\n\n            return true;\n          });\n          draft.nodeDataArray = narr;\n\n          _this5.refreshNodeIndex(narr);\n        }\n\n        var larr = draft.linkDataArray;\n\n        if (modifiedLinkData) {\n          modifiedLinkData.forEach(function (ld) {\n            modifiedLinkMap.set(ld.key, ld);\n\n            var idx = _this5.mapLinkKeyIdx.get(ld.key);\n\n            if (idx !== undefined && idx >= 0) {\n              larr[idx] = ld;\n\n              if (draft.selectedData && draft.selectedData.key === ld.key) {\n                draft.selectedData = ld;\n              }\n            }\n          });\n        }\n\n        if (insertedLinkKeys) {\n          insertedLinkKeys.forEach(function (key) {\n            var ld = modifiedLinkMap.get(key);\n\n            var idx = _this5.mapLinkKeyIdx.get(key);\n\n            if (ld && idx === undefined) {\n              // links won't be added if they already exist\n              _this5.mapLinkKeyIdx.set(ld.key, larr.length);\n\n              larr.push(ld);\n            }\n          });\n        }\n\n        if (removedLinkKeys) {\n          larr = larr.filter(function (ld) {\n            if (removedLinkKeys.includes(ld.key)) {\n              return false;\n            }\n\n            return true;\n          });\n          draft.linkDataArray = larr;\n\n          _this5.refreshLinkIndex(larr);\n        } // handle model data changes, for now just replacing with the supplied object\n\n\n        if (modifiedModelData) {\n          draft.modelData = modifiedModelData;\n        }\n\n        draft.skipsDiagramUpdate = true; // the GoJS model already knows about these updates\n      }));\n    }\n    /**\r\n     * Handle inspector changes, and on input field blurs, update node/link data state.\r\n     * @param path the path to the property being modified\r\n     * @param value the new value of that property\r\n     * @param isBlur whether the input event was a blur, indicating the edit is complete\r\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(path, value, isBlur) {\n      var _this6 = this;\n\n      this.setState(produce(function (draft) {\n        var data = draft.selectedData; // only reached if selectedData isn't null\n\n        data[path] = value;\n\n        if (isBlur) {\n          var key = data.key;\n\n          if (key < 0) {\n            // negative keys are links\n            var idx = _this6.mapLinkKeyIdx.get(key);\n\n            if (idx !== undefined && idx >= 0) {\n              draft.linkDataArray[idx] = data;\n              draft.skipsDiagramUpdate = false;\n            }\n          } else {\n            var _idx2 = _this6.mapNodeKeyIdx.get(key);\n\n            if (_idx2 !== undefined && _idx2 >= 0) {\n              draft.nodeDataArray[_idx2] = data;\n              draft.skipsDiagramUpdate = false;\n            }\n          }\n        }\n      }));\n    }\n    /**\r\n     * Handle changes to the checkbox on whether to allow relinking.\r\n     * @param e a change event from the checkbox\r\n     */\n\n  }, {\n    key: \"handleRelinkChange\",\n    value: function handleRelinkChange(e) {\n      var target = e.target;\n      var value = target.checked;\n      this.setState({\n        modelData: {\n          canRelink: value\n        },\n        skipsDiagramUpdate: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var selectedData = this.state.selectedData;\n      var inspector, inspector2;\n\n      if (selectedData !== null) {\n        inspector = /*#__PURE__*/_jsxDEV(SelectionInspector, {\n          selectedData: this.state.selectedData,\n          onInputChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 19\n        }, this);\n        inspector2 = /*#__PURE__*/_jsxDEV(DataInspector, {\n          selectedData: this.state.selectedData,\n          onInputChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 31\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Try moving around nodes, editing text, relinking, undoing (Ctrl-Z), etc. within the diagram and you'll notice the changes are reflected in the inspector area. You'll also notice that changes made in the inspector are reflected in the diagram. If you use the React dev tools, you can inspect the React state and see it updated as changes happen.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Check out the \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://gojs.net/latest/intro/react.html\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"Intro page on using GoJS with React\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this), \" for more information.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DiagramWrapper, {\n          nodeDataArray: this.state.nodeDataArray,\n          linkDataArray: this.state.linkDataArray,\n          modelData: this.state.modelData,\n          skipsDiagramUpdate: this.state.skipsDiagramUpdate,\n          onDiagramEvent: this.handleDiagramEvent,\n          onModelChange: this.handleModelChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Allow Relinking?\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"relink\",\n            checked: this.state.modelData.canRelink,\n            onChange: this.handleRelinkChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this), inspector, inspector2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["E:/project/webModelica/gojs-react-complex/src/App.tsx"],"names":["go","produce","React","DiagramWrapper","SelectionInspector","DataInspector","demo","App","props","mapNodeKeyIdx","mapLinkKeyIdx","state","nodeDataArray","key","text","color","loc","para","linkDataArray","from","to","modelData","canRelink","selectedData","skipsDiagramUpdate","Map","refreshNodeIndex","refreshLinkIndex","handleDiagramEvent","bind","handleModelChange","handleInputChange","handleRelinkChange","nodeArr","clear","forEach","n","idx","set","linkArr","l","e","name","sel","subject","first","setState","draft","Node","get","undefined","nd","Link","ld","obj","insertedNodeKeys","modifiedNodeData","removedNodeKeys","insertedLinkKeys","modifiedLinkData","removedLinkKeys","modifiedModelData","modifiedNodeMap","modifiedLinkMap","narr","length","push","filter","includes","larr","path","value","isBlur","data","target","checked","inspector","inspector2","Component"],"mappings":"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","sourcesContent":["/*\r\n*  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\r\n\r\nimport * as go from 'gojs';\r\nimport { produce } from 'immer';\r\nimport * as React from 'react';\r\n\r\nimport { DiagramWrapper } from './components/DiagramWrapper';\r\nimport { SelectionInspector,DataInspector } from './components/SelectionInspector';\r\n\r\nimport './App.css';\r\n\r\n/**\r\n * Use a linkDataArray since we'll be using a GraphLinksModel,\r\n * and modelData for demonstration purposes. Note, though, that\r\n * both are optional props in ReactDiagram.\r\n */\r\ninterface AppState {\r\n  nodeDataArray: Array<go.ObjectData>;\r\n  linkDataArray: Array<go.ObjectData>;\r\n  modelData: go.ObjectData;\r\n  selectedData: go.ObjectData | null;\r\n  skipsDiagramUpdate: boolean;\r\n}\r\n\r\n\r\nvar demo = [{\"type\": \"Real\", \"name\": \"k\", \"anno\": \"Desired amplification\"},\r\n {\"type\": \"Modelica.Units.SI.Resistance\", \"name\": \"R1\", \"anno\": \"Resistance at negative input of OpAmp\"}, \r\n {\"type\": \"Modelica.Units.SI.Resistance\", \"name\": \"R2\", \"anno\": \"Calculated resistance to reach k\"}, \r\n {\"type\": \"Modelica.Units.SI.Time\", \"name\": \"T\", \"anno\": \"Time constant\"},\r\n{\"type\": \"Modelica.Units.SI.Capacitance\", \"name\": \"C\", \"anno\": \"Calculated capacitance to reach T\"}]\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n  // Maps to store key -> arr index for quick lookups\r\n  private mapNodeKeyIdx: Map<go.Key, number>;\r\n  private mapLinkKeyIdx: Map<go.Key, number>;\r\n\r\n  constructor(props: object) {\r\n    super(props);\r\n    this.state = {\r\n      nodeDataArray: [\r\n        { key: 0, text: 'Alpha', color: 'lightblue', loc: '0 0' ,para:demo},\r\n        { key: 1, text: 'Beta', color: 'orange', loc: '150 0' },\r\n        { key: 2, text: 'Gamma', color: 'lightgreen', loc: '0 150' },\r\n        { key: 3, text: 'Delta', color: 'pink', loc: '150 150' }\r\n      ],\r\n      linkDataArray: [\r\n        { key: -1, from: 0, to: 1 },\r\n        { key: -2, from: 0, to: 2 },\r\n        { key: -3, from: 1, to: 1 },\r\n        { key: -4, from: 2, to: 3 },\r\n        { key: -5, from: 3, to: 0 }\r\n      ],\r\n      modelData: {\r\n        canRelink: true\r\n      },\r\n      selectedData: null,\r\n      skipsDiagramUpdate: false\r\n    };\r\n    // init maps\r\n    this.mapNodeKeyIdx = new Map<go.Key, number>();\r\n    this.mapLinkKeyIdx = new Map<go.Key, number>();\r\n    this.refreshNodeIndex(this.state.nodeDataArray);\r\n    this.refreshLinkIndex(this.state.linkDataArray);\r\n    // bind handler methods\r\n    this.handleDiagramEvent = this.handleDiagramEvent.bind(this);\r\n    this.handleModelChange = this.handleModelChange.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleRelinkChange = this.handleRelinkChange.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Update map of node keys to their index in the array.\r\n   */\r\n  private refreshNodeIndex(nodeArr: Array<go.ObjectData>) {\r\n    this.mapNodeKeyIdx.clear();\r\n    nodeArr.forEach((n: go.ObjectData, idx: number) => {\r\n      this.mapNodeKeyIdx.set(n.key, idx);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update map of link keys to their index in the array.\r\n   */\r\n  private refreshLinkIndex(linkArr: Array<go.ObjectData>) {\r\n    this.mapLinkKeyIdx.clear();\r\n    linkArr.forEach((l: go.ObjectData, idx: number) => {\r\n      this.mapLinkKeyIdx.set(l.key, idx);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle any relevant DiagramEvents, in this case just selection changes.\r\n   * On ChangedSelection, find the corresponding data and set the selectedData state.\r\n   * @param e a GoJS DiagramEvent\r\n   */\r\n  public handleDiagramEvent(e: go.DiagramEvent) {\r\n    const name = e.name;\r\n    switch (name) {\r\n      case 'ChangedSelection': {\r\n        const sel = e.subject.first();\r\n        this.setState(\r\n          produce((draft: AppState) => {\r\n            if (sel) {\r\n              if (sel instanceof go.Node) {\r\n                const idx = this.mapNodeKeyIdx.get(sel.key);\r\n                if (idx !== undefined && idx >= 0) {\r\n                  const nd = draft.nodeDataArray[idx];\r\n                  draft.selectedData = nd;\r\n                }\r\n              } else if (sel instanceof go.Link) {\r\n                const idx = this.mapLinkKeyIdx.get(sel.key);\r\n                if (idx !== undefined && idx >= 0) {\r\n                  const ld = draft.linkDataArray[idx];\r\n                  draft.selectedData = ld;\r\n                }\r\n              }\r\n            } else {\r\n              draft.selectedData = null;\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n      default: break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle GoJS model changes, which output an object of data changes via Model.toIncrementalData.\r\n   * This method iterates over those changes and updates state to keep in sync with the GoJS model.\r\n   * @param obj a JSON-formatted string\r\n   */\r\n  public handleModelChange(obj: go.IncrementalData) {\r\n    const insertedNodeKeys = obj.insertedNodeKeys;\r\n    const modifiedNodeData = obj.modifiedNodeData;\r\n    const removedNodeKeys = obj.removedNodeKeys;\r\n    const insertedLinkKeys = obj.insertedLinkKeys;\r\n    const modifiedLinkData = obj.modifiedLinkData;\r\n    const removedLinkKeys = obj.removedLinkKeys;\r\n    const modifiedModelData = obj.modelData;\r\n\r\n    // maintain maps of modified data so insertions don't need slow lookups\r\n    const modifiedNodeMap = new Map<go.Key, go.ObjectData>();\r\n    const modifiedLinkMap = new Map<go.Key, go.ObjectData>();\r\n    this.setState(\r\n      produce((draft: AppState) => {\r\n        let narr = draft.nodeDataArray;\r\n        if (modifiedNodeData) {\r\n          modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n            modifiedNodeMap.set(nd.key, nd);\r\n            const idx = this.mapNodeKeyIdx.get(nd.key);\r\n            if (idx !== undefined && idx >= 0) {\r\n              narr[idx] = nd;\r\n              if (draft.selectedData && draft.selectedData.key === nd.key) {\r\n                draft.selectedData = nd;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (insertedNodeKeys) {\r\n          insertedNodeKeys.forEach((key: go.Key) => {\r\n            const nd = modifiedNodeMap.get(key);\r\n            const idx = this.mapNodeKeyIdx.get(key);\r\n            if (nd && idx === undefined) {  // nodes won't be added if they already exist\r\n              this.mapNodeKeyIdx.set(nd.key, narr.length);\r\n              narr.push(nd);\r\n            }\r\n          });\r\n        }\r\n        if (removedNodeKeys) {\r\n          narr = narr.filter((nd: go.ObjectData) => {\r\n            if (removedNodeKeys.includes(nd.key)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n          draft.nodeDataArray = narr;\r\n          this.refreshNodeIndex(narr);\r\n        }\r\n\r\n        let larr = draft.linkDataArray;\r\n        if (modifiedLinkData) {\r\n          modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n            modifiedLinkMap.set(ld.key, ld);\r\n            const idx = this.mapLinkKeyIdx.get(ld.key);\r\n            if (idx !== undefined && idx >= 0) {\r\n              larr[idx] = ld;\r\n              if (draft.selectedData && draft.selectedData.key === ld.key) {\r\n                draft.selectedData = ld;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (insertedLinkKeys) {\r\n          insertedLinkKeys.forEach((key: go.Key) => {\r\n            const ld = modifiedLinkMap.get(key);\r\n            const idx = this.mapLinkKeyIdx.get(key);\r\n            if (ld && idx === undefined) {  // links won't be added if they already exist\r\n              this.mapLinkKeyIdx.set(ld.key, larr.length);\r\n              larr.push(ld);\r\n            }\r\n          });\r\n        }\r\n        if (removedLinkKeys) {\r\n          larr = larr.filter((ld: go.ObjectData) => {\r\n            if (removedLinkKeys.includes(ld.key)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n          draft.linkDataArray = larr;\r\n          this.refreshLinkIndex(larr);\r\n        }\r\n        // handle model data changes, for now just replacing with the supplied object\r\n        if (modifiedModelData) {\r\n          draft.modelData = modifiedModelData;\r\n        }\r\n        draft.skipsDiagramUpdate = true;  // the GoJS model already knows about these updates\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle inspector changes, and on input field blurs, update node/link data state.\r\n   * @param path the path to the property being modified\r\n   * @param value the new value of that property\r\n   * @param isBlur whether the input event was a blur, indicating the edit is complete\r\n   */\r\n  public handleInputChange(path: string, value: string, isBlur: boolean) {\r\n    this.setState(\r\n      produce((draft: AppState) => {\r\n        const data = draft.selectedData as go.ObjectData;  // only reached if selectedData isn't null\r\n        data[path] = value;\r\n        if (isBlur) {\r\n          const key = data.key;\r\n          if (key < 0) {  // negative keys are links\r\n            const idx = this.mapLinkKeyIdx.get(key);\r\n            if (idx !== undefined && idx >= 0) {\r\n              draft.linkDataArray[idx] = data;\r\n              draft.skipsDiagramUpdate = false;\r\n            }\r\n          } else {\r\n            const idx = this.mapNodeKeyIdx.get(key);\r\n            if (idx !== undefined && idx >= 0) {\r\n              draft.nodeDataArray[idx] = data;\r\n              draft.skipsDiagramUpdate = false;\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle changes to the checkbox on whether to allow relinking.\r\n   * @param e a change event from the checkbox\r\n   */\r\n  public handleRelinkChange(e: any) {\r\n    const target = e.target;\r\n    const value = target.checked;\r\n    this.setState({ modelData: { canRelink: value }, skipsDiagramUpdate: false });\r\n  }\r\n\r\n  public render() {\r\n    const selectedData = this.state.selectedData;\r\n    let inspector,inspector2;\r\n    if (selectedData !== null) {\r\n      inspector = <SelectionInspector\r\n                    selectedData={this.state.selectedData}\r\n                    onInputChange={this.handleInputChange}\r\n                  />;\r\n                  inspector2 =<DataInspector\r\n                  selectedData={this.state.selectedData}\r\n                  onInputChange={this.handleInputChange}\r\n                />;\r\n      \r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <p>\r\n          Try moving around nodes, editing text, relinking, undoing (Ctrl-Z), etc. within the diagram\r\n          and you'll notice the changes are reflected in the inspector area. You'll also notice that changes\r\n          made in the inspector are reflected in the diagram. If you use the React dev tools,\r\n          you can inspect the React state and see it updated as changes happen.\r\n        </p>\r\n        <p>\r\n          Check out the <a href='https://gojs.net/latest/intro/react.html' target='_blank' rel='noopener noreferrer'>Intro page on using GoJS with React</a> for more information.\r\n        </p>\r\n        <DiagramWrapper\r\n          nodeDataArray={this.state.nodeDataArray}\r\n          linkDataArray={this.state.linkDataArray}\r\n          modelData={this.state.modelData}\r\n          skipsDiagramUpdate={this.state.skipsDiagramUpdate}\r\n          onDiagramEvent={this.handleDiagramEvent}\r\n          onModelChange={this.handleModelChange}\r\n        />\r\n        <label>\r\n          Allow Relinking?\r\n          <input\r\n            type='checkbox'\r\n            id='relink'\r\n            checked={this.state.modelData.canRelink}\r\n            onChange={this.handleRelinkChange} />\r\n        </label>\r\n        {inspector}\r\n        {inspector2}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}