{"ast":null,"code":"import _classCallCheck from \"C:/project/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/project/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/project/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/project/gojs-react-complex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\project\\\\gojs-react-complex\\\\src\\\\components\\\\DiagramWrapper.tsx\";\n\n/*\r\n*  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\nimport * as go from 'gojs';\nimport { ReactDiagram } from 'gojs-react';\nimport * as React from 'react';\nimport { GuidedDraggingTool } from '../GuidedDraggingTool';\nimport './Diagram.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var DiagramWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(DiagramWrapper, _React$Component);\n\n  var _super = _createSuper(DiagramWrapper);\n\n  /**\r\n   * Ref to keep a reference to the Diagram component, which provides access to the GoJS diagram via getDiagram().\r\n   */\n\n  /** @internal */\n  function DiagramWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, DiagramWrapper);\n\n    _this = _super.call(this, props);\n    _this.diagramRef = void 0;\n    _this.diagramRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n  /**\r\n   * Get the diagram reference and add any desired diagram listeners.\r\n   * Typically the same function will be used for each listener, with the function using a switch statement to handle the events.\r\n   */\n\n\n  _createClass(DiagramWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.diagramRef.current) return;\n      var diagram = this.diagramRef.current.getDiagram();\n\n      if (diagram instanceof go.Diagram) {\n        diagram.addDiagramListener('ChangedSelection', this.props.onDiagramEvent);\n      }\n    }\n    /**\r\n     * Get the diagram reference and remove listeners that were added during mounting.\r\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (!this.diagramRef.current) return;\n      var diagram = this.diagramRef.current.getDiagram();\n\n      if (diagram instanceof go.Diagram) {\n        diagram.removeDiagramListener('ChangedSelection', this.props.onDiagramEvent);\n      }\n    }\n    /**\r\n     * Diagram initialization method, which is passed to the ReactDiagram component.\r\n     * This method is responsible for making the diagram and initializing the model, any templates,\r\n     * and maybe doing other initialization tasks like customizing tools.\r\n     * The model's data should not be set here, as the ReactDiagram component handles that.\r\n     */\n\n  }, {\n    key: \"initDiagram\",\n    value: function initDiagram() {\n      var $ = go.GraphObject.make; // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n\n      var diagram = $(go.Diagram, {\n        'undoManager.isEnabled': true,\n        // must be set to allow for model change listening\n        // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n        'clickCreatingTool.archetypeNodeData': {\n          text: 'new node',\n          color: 'lightblue'\n        },\n        draggingTool: new GuidedDraggingTool(),\n        // defined in GuidedDraggingTool.ts\n        'draggingTool.horizontalGuidelineColor': 'blue',\n        'draggingTool.verticalGuidelineColor': 'blue',\n        'draggingTool.centerGuidelineColor': 'green',\n        'draggingTool.guidelineWidth': 1,\n        layout: $(go.ForceDirectedLayout),\n        model: $(go.GraphLinksModel, {\n          linkKeyProperty: 'key',\n          // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n          // positive keys for nodes\n          makeUniqueKeyFunction: function makeUniqueKeyFunction(m, data) {\n            var k = data.key || 1;\n\n            while (m.findNodeDataForKey(k)) {\n              k++;\n            }\n\n            data.key = k;\n            return k;\n          },\n          // negative keys for links\n          makeUniqueLinkKeyFunction: function makeUniqueLinkKeyFunction(m, data) {\n            var k = data.key || -1;\n\n            while (m.findLinkDataForKey(k)) {\n              k--;\n            }\n\n            data.key = k;\n            return k;\n          }\n        })\n      }); // define a simple Node template\n\n      diagram.nodeTemplate = $(go.Node, 'Auto', // the Shape will go around the TextBlock\n      new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, 'RoundedRectangle', {\n        name: 'SHAPE',\n        fill: 'white',\n        strokeWidth: 0,\n        // set the port properties:\n        portId: '',\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: 'pointer'\n      }, // Shape.fill is bound to Node.data.color\n      new go.Binding('fill', 'color')), $(go.TextBlock, {\n        margin: 8,\n        editable: true,\n        font: '400 .875rem Roboto, sans-serif'\n      }, // some room around the text\n      new go.Binding('text').makeTwoWay())); // relinking depends on modelData\n\n      diagram.linkTemplate = $(go.Link, new go.Binding('relinkableFrom', 'canRelink').ofModel(), new go.Binding('relinkableTo', 'canRelink').ofModel(), $(go.Shape), $(go.Shape, {\n        toArrow: 'Standard'\n      }));\n      return diagram;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(ReactDiagram, {\n        ref: this.diagramRef,\n        divClassName: \"diagram-component\",\n        initDiagram: this.initDiagram,\n        nodeDataArray: this.props.nodeDataArray,\n        linkDataArray: this.props.linkDataArray,\n        modelData: this.props.modelData,\n        onModelChange: this.props.onModelChange,\n        skipsDiagramUpdate: this.props.skipsDiagramUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return DiagramWrapper;\n}(React.Component);","map":{"version":3,"sources":["C:/project/gojs-react-complex/src/components/DiagramWrapper.tsx"],"names":["go","ReactDiagram","React","GuidedDraggingTool","DiagramWrapper","props","diagramRef","createRef","current","diagram","getDiagram","Diagram","addDiagramListener","onDiagramEvent","removeDiagramListener","$","GraphObject","make","text","color","draggingTool","layout","ForceDirectedLayout","model","GraphLinksModel","linkKeyProperty","makeUniqueKeyFunction","m","data","k","key","findNodeDataForKey","makeUniqueLinkKeyFunction","findLinkDataForKey","nodeTemplate","Node","Binding","Point","parse","makeTwoWay","stringify","Shape","name","fill","strokeWidth","portId","fromLinkable","toLinkable","cursor","TextBlock","margin","editable","font","linkTemplate","Link","ofModel","toArrow","initDiagram","nodeDataArray","linkDataArray","modelData","onModelChange","skipsDiagramUpdate","Component"],"mappings":"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","sourcesContent":["/*\r\n*  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\r\n\r\nimport * as go from 'gojs';\r\nimport { ReactDiagram } from 'gojs-react';\r\nimport * as React from 'react';\r\n\r\nimport { GuidedDraggingTool } from '../GuidedDraggingTool';\r\n\r\nimport './Diagram.css';\r\n\r\ninterface DiagramProps {\r\n  nodeDataArray: Array<go.ObjectData>;\r\n  linkDataArray: Array<go.ObjectData>;\r\n  modelData: go.ObjectData;\r\n  skipsDiagramUpdate: boolean;\r\n  onDiagramEvent: (e: go.DiagramEvent) => void;\r\n  onModelChange: (e: go.IncrementalData) => void;\r\n}\r\n\r\nexport class DiagramWrapper extends React.Component<DiagramProps, {}> {\r\n  /**\r\n   * Ref to keep a reference to the Diagram component, which provides access to the GoJS diagram via getDiagram().\r\n   */\r\n  private diagramRef: React.RefObject<ReactDiagram>;\r\n\r\n  /** @internal */\r\n  constructor(props: DiagramProps) {\r\n    super(props);\r\n    this.diagramRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   * Get the diagram reference and add any desired diagram listeners.\r\n   * Typically the same function will be used for each listener, with the function using a switch statement to handle the events.\r\n   */\r\n  public componentDidMount() {\r\n    if (!this.diagramRef.current) return;\r\n    const diagram = this.diagramRef.current.getDiagram();\r\n    if (diagram instanceof go.Diagram) {\r\n      diagram.addDiagramListener('ChangedSelection', this.props.onDiagramEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the diagram reference and remove listeners that were added during mounting.\r\n   */\r\n  public componentWillUnmount() {\r\n    if (!this.diagramRef.current) return;\r\n    const diagram = this.diagramRef.current.getDiagram();\r\n    if (diagram instanceof go.Diagram) {\r\n      diagram.removeDiagramListener('ChangedSelection', this.props.onDiagramEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Diagram initialization method, which is passed to the ReactDiagram component.\r\n   * This method is responsible for making the diagram and initializing the model, any templates,\r\n   * and maybe doing other initialization tasks like customizing tools.\r\n   * The model's data should not be set here, as the ReactDiagram component handles that.\r\n   */\r\n  private initDiagram(): go.Diagram {\r\n    const $ = go.GraphObject.make;\r\n    // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n    const diagram =\r\n      $(go.Diagram,\r\n        {\r\n          'undoManager.isEnabled': true,  // must be set to allow for model change listening\r\n          // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\r\n          'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' },\r\n          draggingTool: new GuidedDraggingTool(),  // defined in GuidedDraggingTool.ts\r\n          'draggingTool.horizontalGuidelineColor': 'blue',\r\n          'draggingTool.verticalGuidelineColor': 'blue',\r\n          'draggingTool.centerGuidelineColor': 'green',\r\n          'draggingTool.guidelineWidth': 1,\r\n          layout: $(go.ForceDirectedLayout),\r\n          model: $(go.GraphLinksModel,\r\n            {\r\n              linkKeyProperty: 'key',  // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n              // positive keys for nodes\r\n              makeUniqueKeyFunction: (m: go.Model, data: any) => {\r\n                let k = data.key || 1;\r\n                while (m.findNodeDataForKey(k)) k++;\r\n                data.key = k;\r\n                return k;\r\n              },\r\n              // negative keys for links\r\n              makeUniqueLinkKeyFunction: (m: go.GraphLinksModel, data: any) => {\r\n                let k = data.key || -1;\r\n                while (m.findLinkDataForKey(k)) k--;\r\n                data.key = k;\r\n                return k;\r\n              }\r\n            })\r\n        });\r\n\r\n    // define a simple Node template\r\n    diagram.nodeTemplate =\r\n      $(go.Node, 'Auto',  // the Shape will go around the TextBlock\r\n        new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        $(go.Shape, 'RoundedRectangle',\r\n          {\r\n            name: 'SHAPE', fill: 'white', strokeWidth: 0,\r\n            // set the port properties:\r\n            portId: '', fromLinkable: true, toLinkable: true, cursor: 'pointer'\r\n          },\r\n          // Shape.fill is bound to Node.data.color\r\n          new go.Binding('fill', 'color')),\r\n        $(go.TextBlock,\r\n          { margin: 8, editable: true, font: '400 .875rem Roboto, sans-serif' },  // some room around the text\r\n          new go.Binding('text').makeTwoWay()\r\n        )\r\n      );\r\n\r\n    // relinking depends on modelData\r\n    diagram.linkTemplate =\r\n      $(go.Link,\r\n        new go.Binding('relinkableFrom', 'canRelink').ofModel(),\r\n        new go.Binding('relinkableTo', 'canRelink').ofModel(),\r\n        $(go.Shape),\r\n        $(go.Shape, { toArrow: 'Standard' })\r\n      );\r\n\r\n    return diagram;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ReactDiagram\r\n        ref={this.diagramRef}\r\n        divClassName='diagram-component'\r\n        initDiagram={this.initDiagram}\r\n        nodeDataArray={this.props.nodeDataArray}\r\n        linkDataArray={this.props.linkDataArray}\r\n        modelData={this.props.modelData}\r\n        onModelChange={this.props.onModelChange}\r\n        skipsDiagramUpdate={this.props.skipsDiagramUpdate}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}