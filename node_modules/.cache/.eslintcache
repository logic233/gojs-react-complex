[{"C:\\project\\gojs-react-complex\\src\\index.tsx":"1","C:\\project\\gojs-react-complex\\src\\App.tsx":"2","C:\\project\\gojs-react-complex\\src\\components\\DiagramWrapper.tsx":"3","C:\\project\\gojs-react-complex\\src\\components\\SelectionInspector.tsx":"4","C:\\project\\gojs-react-complex\\src\\GuidedDraggingTool.ts":"5","C:\\project\\gojs-react-complex\\src\\components\\InspectorRow.tsx":"6","C:\\project\\gojs-react-complex\\src\\components\\treeView.tsx":"7"},{"size":1259,"mtime":1646876099756,"results":"8","hashOfConfig":"9"},{"size":11749,"mtime":1646889095458,"results":"10","hashOfConfig":"9"},{"size":5366,"mtime":1646026890952,"results":"11","hashOfConfig":"9"},{"size":3261,"mtime":1646724752306,"results":"12","hashOfConfig":"9"},{"size":20011,"mtime":1646026890952,"results":"13","hashOfConfig":"9"},{"size":1986,"mtime":1646039339572,"results":"14","hashOfConfig":"9"},{"size":3976,"mtime":1646646268453,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1b3socp",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},"C:\\project\\gojs-react-complex\\src\\index.tsx",["34"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport * as fs from 'fs';\r\nfunction getDataJson() {\r\n    var url = \"http://localhost:9999/\"\r\n    var httpRequest = new XMLHttpRequest();//第一步：建立所需的对象\r\n    //需要异步请求\r\n    httpRequest.open('GET', url, false);//第二步：打开连接  将请求参数写在url中  ps:\"./Ptest.php?name=test&nameone=testone\"\r\n    httpRequest.send();//第三步：发送请求  将请求参数写在URL中\r\n    /**\r\n     * 获取数据后的处理程序\r\n     */\r\n    // httpRequest.onreadystatechange = function () {\r\n    //     if (httpRequest.readyState == 4 && httpRequest.status == 200) {\r\n    //         dataJson = JSON.parse(httpRequest.responseText);//获取到json字符串，还需解析\r\n    //         console.log('dataJson: ', dataJson);\r\n    //         // return dataJson;\r\n    //     }\r\n    // };\r\n    var dataJson = JSON.parse(httpRequest.responseText);\r\n    console.log('dataJson: ', dataJson);\r\n    return dataJson;\r\n   \r\n}\r\n\r\n\r\nReactDOM.render(<App model={getDataJson()} />, document.getElementById('root'));\r\n\r\n// const dataJson = require('./model.json');\r\n// ReactDOM.render(<App model={dataJson} />, document.getElementById('root'));",["35","36"],"C:\\project\\gojs-react-complex\\src\\App.tsx",[],"C:\\project\\gojs-react-complex\\src\\components\\DiagramWrapper.tsx",[],"C:\\project\\gojs-react-complex\\src\\components\\SelectionInspector.tsx",["37"],"/*\r\n*  Copyright (C) 1998-2021 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\r\n\r\nimport * as React from 'react';\r\n\r\nimport { InspectorRow } from './InspectorRow';\r\n\r\nimport './Inspector.css';\r\n\r\ninterface SelectionInspectorProps {\r\n  selectedData: any;\r\n  onInputChange: (id: string, value: string, isBlur: boolean) => void;\r\n}\r\n\r\nexport class SelectionInspector extends React.PureComponent<SelectionInspectorProps, {}> {\r\n  /**\r\n   * Render the object data, passing down property keys and values.\r\n   */\r\n  private renderObjectDetails() {\r\n    const selObj = this.props.selectedData;\r\n    console.log('selObj: ', selObj);\r\n    const dets = [];\r\n    for (const k in selObj) {\r\n      if(k==='para'){\r\n        continue;\r\n      }\r\n      const val = selObj[k];\r\n      const row = <InspectorRow\r\n                    key={k}\r\n                    id={k}\r\n                    value={val}\r\n                    onInputChange={this.props.onInputChange} />;\r\n      if (k === 'key') {\r\n        dets.unshift(row); // key always at start\r\n      } else {\r\n        dets.push(row);\r\n      }\r\n    }\r\n    return dets;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div id='myInspectorDiv' className='inspector'>\r\n        <table>\r\n          <tbody>\r\n            {this.renderObjectDetails()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//显示模型参数并且提供更改\r\nexport class DataInspector extends React.PureComponent<SelectionInspectorProps,{value?:Array<number>}> {\r\n  /**\r\n   * Render the object data, passing down property keys and values.\r\n   */\r\n\r\n\r\n\r\n   constructor(props: SelectionInspectorProps) {\r\n    super(props);\r\n    this.state = {value: new Array(100) };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    // this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event: any) {    \r\n    console.log(this.state.value);\r\n    var i = event.target.name;\r\n    var newValue = this.state.value;\r\n    newValue![i]=event.target.value;\r\n    this.setState({value: newValue});  \r\n  }\r\n\r\n  public getValue = ()=>{\r\n    // console.log(this.state.value);\r\n    return this.state.value;\r\n  }\r\n\r\n  private renderObjectDetails() {\r\n    const selObj = this.props.selectedData;\r\n    const para = selObj[\"para\"]\r\n    console.log(this.state.value);\r\n    const dets = [];\r\n    if (para == undefined){\r\n      return <p>this model has no paras</p>\r\n    }\r\n    else{\r\n      const row = \r\n        <tr>\r\n          <th>name</th>\r\n          <th>value</th>\r\n          <th>type</th>\r\n          <th>description</th>\r\n        </tr>       \r\n        dets.push(row)\r\n      for(let i=0;i<para.length;i++){\r\n        \r\n        const row =\r\n          <tr>\r\n            <td> {para[i][\"name\"]}</td>\r\n            <td><input name={i+\"\"} type=\"text\"  value={this.state.value![i]}  onChange={this.handleChange}/></td>\r\n            <td> {para[i][\"type\"]}</td>\r\n            <td> {para[i][\"anno\"]}</td>\r\n          </tr> \r\n        dets.push(row)\r\n      }\r\n    }\r\n    return dets;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div id='myDataInspectorDiv' className='datainspector'>\r\n        <h1>parameters</h1>\r\n        <table  id='mytable'  >\r\n            {this.renderObjectDetails()}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\project\\gojs-react-complex\\src\\GuidedDraggingTool.ts",[],"C:\\project\\gojs-react-complex\\src\\components\\InspectorRow.tsx",[],"C:\\project\\gojs-react-complex\\src\\components\\treeView.tsx",["38"],"\r\n\r\nimport * as React from 'react';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport TreeItem, {\r\n    TreeItemProps,\r\n    useTreeItem,\r\n    TreeItemContentProps,\r\n} from '@mui/lab/TreeItem';\r\nimport clsx from 'clsx';\r\nimport Typography from '@mui/material/Typography';\r\n\r\n\r\n\r\ninterface Node {\r\n    id: string;\r\n    name: string;\r\n    completeName : string;\r\n    children: Node[];\r\n\r\n}\r\ninterface MyTreeViewprops {\r\n    nodes: Node;\r\n}\r\n\r\n\r\n\r\nconst CustomContent = React.forwardRef(function CustomContent(\r\n    props: TreeItemContentProps,\r\n    ref,\r\n) {\r\n    const {\r\n        classes,\r\n        className,\r\n        label,\r\n        nodeId,\r\n        icon: iconProp,\r\n        expansionIcon,\r\n        displayIcon,\r\n    } = props;\r\n\r\n    const {\r\n        disabled,\r\n        expanded,\r\n        selected,\r\n        focused,\r\n        handleExpansion,\r\n        handleSelection,\r\n        preventSelection,\r\n    } = useTreeItem(nodeId);\r\n\r\n    const icon = iconProp || expansionIcon || displayIcon;\r\n\r\n    const handleMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        preventSelection(event);\r\n    };\r\n\r\n    const handleExpansionClick = (\r\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    ) => {\r\n        handleExpansion(event);\r\n    };\r\n\r\n    const handleSelectionClick = (\r\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    ) => {\r\n        handleSelection(event);\r\n    };\r\n\r\n    return (\r\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\r\n        <div\r\n            className={clsx(className, classes.root, {\r\n                [classes.expanded]: expanded,\r\n                [classes.selected]: selected,\r\n                [classes.focused]: focused,\r\n                [classes.disabled]: disabled,\r\n            })}\r\n            onMouseDown={handleMouseDown}\r\n            ref={ref as React.Ref<HTMLDivElement>}\r\n        >\r\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\r\n            <div onClick={handleExpansionClick} className={classes.iconContainer}>\r\n                {icon}\r\n            </div>\r\n            <Typography\r\n                onClick={handleSelectionClick}\r\n                component=\"div\"\r\n                className={classes.label}\r\n            >\r\n                {label}\r\n            </Typography>\r\n        </div>\r\n    );\r\n});\r\nconst CustomTreeItem = (props: TreeItemProps) => (\r\n    <TreeItem ContentComponent={CustomContent}  {...props} />\r\n);\r\n\r\n\r\n\r\n\r\nexport class MyTreeView extends React.PureComponent<MyTreeViewprops, {}>{\r\n\r\n\r\n\r\n    //渲染数据\r\n    renderTree = (node: Node) => (\r\n        <div>\r\n            <CustomTreeItem key={node.id} nodeId={node.id} label={node.name}>\r\n                {Array.isArray(node.children) ? node.children.map((x) => this.renderTree(x)) : null}\r\n            </CustomTreeItem>\r\n\r\n        </div>\r\n    );\r\n\r\n    public findNodeById(id:string,node:Node){\r\n        if (node.id == id){\r\n            return node;\r\n        } \r\n        else{\r\n            for(let i=0;i<node.children.length;i++){\r\n                let x:any;\r\n                x = this.findNodeById(id,node.children[i]);\r\n                if (x!==null)return x;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <TreeView\r\n                aria-label=\"icon expansion\"\r\n                defaultCollapseIcon={<ExpandMoreIcon />}\r\n                defaultExpandIcon={<ChevronRightIcon />}\r\n                sx={{ height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\r\n                onNodeSelect={(event: object, value: string) => { console.log(this.findNodeById(value,this.props.nodes).name); }}\r\n\r\n            >\r\n                {this.renderTree(this.props.nodes)}\r\n            </TreeView>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}",{"ruleId":"39","severity":1,"message":"40","line":5,"column":13,"nodeType":"41","messageId":"42","endLine":5,"endColumn":15},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":89,"column":14,"nodeType":"49","messageId":"50","endLine":89,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":120,"column":21,"nodeType":"49","messageId":"50","endLine":120,"endColumn":23},"@typescript-eslint/no-unused-vars","'fs' is defined but never used.","Identifier","unusedVar","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]