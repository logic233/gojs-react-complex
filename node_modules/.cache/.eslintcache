[{"C:\\project\\gojs-react-complex\\src\\index.tsx":"1","C:\\project\\gojs-react-complex\\src\\App.tsx":"2","C:\\project\\gojs-react-complex\\src\\components\\DiagramWrapper.tsx":"3","C:\\project\\gojs-react-complex\\src\\components\\SelectionInspector.tsx":"4","C:\\project\\gojs-react-complex\\src\\GuidedDraggingTool.ts":"5","C:\\project\\gojs-react-complex\\src\\components\\InspectorRow.tsx":"6","C:\\project\\gojs-react-complex\\src\\components\\treeView.tsx":"7"},{"size":250,"mtime":1646723500805,"results":"8","hashOfConfig":"9"},{"size":11715,"mtime":1646725625115,"results":"10","hashOfConfig":"9"},{"size":5366,"mtime":1646026890952,"results":"11","hashOfConfig":"9"},{"size":3261,"mtime":1646724752306,"results":"12","hashOfConfig":"9"},{"size":20011,"mtime":1646026890952,"results":"13","hashOfConfig":"9"},{"size":1986,"mtime":1646039339572,"results":"14","hashOfConfig":"9"},{"size":3976,"mtime":1646646268453,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b3socp",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},"C:\\project\\gojs-react-complex\\src\\index.tsx",[],"C:\\project\\gojs-react-complex\\src\\App.tsx",[],"C:\\project\\gojs-react-complex\\src\\components\\DiagramWrapper.tsx",[],["32","33"],"C:\\project\\gojs-react-complex\\src\\components\\SelectionInspector.tsx",["34"],"C:\\project\\gojs-react-complex\\src\\GuidedDraggingTool.ts",[],"C:\\project\\gojs-react-complex\\src\\components\\InspectorRow.tsx",[],"C:\\project\\gojs-react-complex\\src\\components\\treeView.tsx",["35"],"\r\n\r\nimport * as React from 'react';\r\nimport TreeView from '@mui/lab/TreeView';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport TreeItem, {\r\n    TreeItemProps,\r\n    useTreeItem,\r\n    TreeItemContentProps,\r\n} from '@mui/lab/TreeItem';\r\nimport clsx from 'clsx';\r\nimport Typography from '@mui/material/Typography';\r\n\r\n\r\n\r\ninterface Node {\r\n    id: string;\r\n    name: string;\r\n    completeName : string;\r\n    children: Node[];\r\n\r\n}\r\ninterface MyTreeViewprops {\r\n    nodes: Node;\r\n}\r\n\r\n\r\n\r\nconst CustomContent = React.forwardRef(function CustomContent(\r\n    props: TreeItemContentProps,\r\n    ref,\r\n) {\r\n    const {\r\n        classes,\r\n        className,\r\n        label,\r\n        nodeId,\r\n        icon: iconProp,\r\n        expansionIcon,\r\n        displayIcon,\r\n    } = props;\r\n\r\n    const {\r\n        disabled,\r\n        expanded,\r\n        selected,\r\n        focused,\r\n        handleExpansion,\r\n        handleSelection,\r\n        preventSelection,\r\n    } = useTreeItem(nodeId);\r\n\r\n    const icon = iconProp || expansionIcon || displayIcon;\r\n\r\n    const handleMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        preventSelection(event);\r\n    };\r\n\r\n    const handleExpansionClick = (\r\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    ) => {\r\n        handleExpansion(event);\r\n    };\r\n\r\n    const handleSelectionClick = (\r\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    ) => {\r\n        handleSelection(event);\r\n    };\r\n\r\n    return (\r\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\r\n        <div\r\n            className={clsx(className, classes.root, {\r\n                [classes.expanded]: expanded,\r\n                [classes.selected]: selected,\r\n                [classes.focused]: focused,\r\n                [classes.disabled]: disabled,\r\n            })}\r\n            onMouseDown={handleMouseDown}\r\n            ref={ref as React.Ref<HTMLDivElement>}\r\n        >\r\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\r\n            <div onClick={handleExpansionClick} className={classes.iconContainer}>\r\n                {icon}\r\n            </div>\r\n            <Typography\r\n                onClick={handleSelectionClick}\r\n                component=\"div\"\r\n                className={classes.label}\r\n            >\r\n                {label}\r\n            </Typography>\r\n        </div>\r\n    );\r\n});\r\nconst CustomTreeItem = (props: TreeItemProps) => (\r\n    <TreeItem ContentComponent={CustomContent}  {...props} />\r\n);\r\n\r\n\r\n\r\n\r\nexport class MyTreeView extends React.PureComponent<MyTreeViewprops, {}>{\r\n\r\n\r\n\r\n    //渲染数据\r\n    renderTree = (node: Node) => (\r\n        <div>\r\n            <CustomTreeItem key={node.id} nodeId={node.id} label={node.name}>\r\n                {Array.isArray(node.children) ? node.children.map((x) => this.renderTree(x)) : null}\r\n            </CustomTreeItem>\r\n\r\n        </div>\r\n    );\r\n\r\n    public findNodeById(id:string,node:Node){\r\n        if (node.id == id){\r\n            return node;\r\n        } \r\n        else{\r\n            for(let i=0;i<node.children.length;i++){\r\n                let x:any;\r\n                x = this.findNodeById(id,node.children[i]);\r\n                if (x!==null)return x;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <TreeView\r\n                aria-label=\"icon expansion\"\r\n                defaultCollapseIcon={<ExpandMoreIcon />}\r\n                defaultExpandIcon={<ChevronRightIcon />}\r\n                sx={{ height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\r\n                onNodeSelect={(event: object, value: string) => { console.log(this.findNodeById(value,this.props.nodes).name); }}\r\n\r\n            >\r\n                {this.renderTree(this.props.nodes)}\r\n            </TreeView>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":89,"column":14,"nodeType":"42","messageId":"43","endLine":89,"endColumn":16},{"ruleId":"40","severity":1,"message":"41","line":120,"column":21,"nodeType":"42","messageId":"43","endLine":120,"endColumn":23},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]